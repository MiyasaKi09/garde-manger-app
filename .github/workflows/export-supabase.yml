name: Export Supabase (schema + CSV, auto-detect 6543/6544)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      DB_NAME: postgres
      PGSSLMODE: require   # force SSL côté client psql

    steps:
      - uses: actions/checkout@v4

      - name: Install psql, zip, dnsutils
        run: sudo apt-get update && sudo apt-get install -y postgresql-client dnsutils zip

      # --- Normaliser les secrets pour éviter "could not translate host name" ---
      - name: Normalize secrets (host/ref/password)
        id: norm
        shell: bash
        env:
          RAW_HOST: "${{ secrets.SUPABASE_POOLER_HOST }}"
          RAW_REF:  "${{ secrets.SUPABASE_PROJECT_REF }}"
        run: |
          set -e
          H="$RAW_HOST"
          H="${H#postgresql://}"; H="${H#postgres://}"
          [[ "$H" == *"@"* ]] && H="${H#*@}"
          H="${H%%/*}"
          H="${H%%:*}"
          H="$(echo -n "$H" | tr -d '[:space:]')"
          if [ -z "$H" ]; then echo "Host empty after normalization"; exit 1; fi
          echo "HOST_CLEAN=$H" >> "$GITHUB_ENV"
          echo "REF_CLEAN=$(echo -n "$RAW_REF" | tr -d '[:space:]')" >> "$GITHUB_ENV"
          echo "Normalized host: $H"
          echo "Normalized ref:  $RAW_REF"

      - name: DNS check
        shell: bash
        run: |
          set -e
          echo "nslookup $HOST_CLEAN"
          nslookup "$HOST_CLEAN" >/dev/null 2>&1 || { echo "❌ DNS failed for $HOST_CLEAN"; exit 1; }
          echo "✅ DNS ok for $HOST_CLEAN"

      # --- Détection auto : ports 6543 puis 6544, modes A/B/C/D ---
      - name: Detect working connection (6543/6544, A/B/C/D)
        id: pick
        shell: bash
        env:
          PGPASSWORD: "${{ secrets.SUPABASE_DB_PASSWORD }}"
        run: |
          set +e
          try() {
            local P="$1" U="$2" PGOPT="$3" MODE="$4"
            echo "---- try $MODE: host=$HOST_CLEAN port=$P user=$U PGOPTIONS=$PGOPT"
            if [ -n "$PGOPT" ]; then
              PGOPTIONS="$PGOPT" psql "host=$HOST_CLEAN port=$P dbname=$DB_NAME user=$U sslmode=require" -Atc "select '$MODE' as mode, current_user;"
            else
              psql "host=$HOST_CLEAN port=$P dbname=$DB_NAME user=$U sslmode=require" -Atc "select '$MODE' as mode, current_user;"
            fi
            RC=$?; echo "$MODE exit code: $RC"; echo; return $RC
          }

          # A: 6543 + postgres.<ref>
          try 6543 "postgres.${REF_CLEAN}" "" "A_6543_user_ref"
          [ $? -eq 0 ] && { echo "MODE=A"; echo "PORT=6543"; echo "USER=postgres.${REF_CLEAN}"; echo "PGOPT=";  } >> "$GITHUB_OUTPUT" && exit 0

          # B: 6543 + postgres + PGOPTIONS
          try 6543 "postgres" "project=${REF_CLEAN}" "B_6543_pgopt"
          [ $? -eq 0 ] && { echo "MODE=B"; echo "PORT=6543"; echo "USER=postgres"; echo "PGOPT=project=${REF_CLEAN}"; } >> "$GITHUB_OUTPUT" && exit 0

          # C: 6544 + postgres.<ref>
          try 6544 "postgres.${REF_CLEAN}" "" "C_6544_user_ref"
          [ $? -eq 0 ] && { echo "MODE=C"; echo "PORT=6544"; echo "USER=postgres.${REF_CLEAN}"; echo "PGOPT="; } >> "$GITHUB_OUTPUT" && exit 0

          # D: 6544 + postgres + PGOPTIONS
          try 6544 "postgres" "project=${REF_CLEAN}" "D_6544_pgopt"
          [ $? -eq 0 ] && { echo "MODE=D"; echo "PORT=6544"; echo "USER=postgres"; echo "PGOPT=project=${REF_CLEAN}"; } >> "$GITHUB_OUTPUT" && exit 0

          echo "❌ No working mode on 6543/6544 (A/B/C/D). Check host/ref/password."
          exit 1

      # --- schema.md ---
      - name: Generate schema.md
        shell: bash
        env:
          PGPASSWORD: "${{ secrets.SUPABASE_DB_PASSWORD }}"
          PORT: "${{ steps.pick.outputs.PORT }}"
          USER: "${{ steps.pick.outputs.USER }}"
          PGOPT: "${{ steps.pick.outputs.PGOPT }}"
        run: |
          set -e
          if [ -n "$PGOPT" ]; then
            PGOPTIONS="$PGOPT" psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" \
              -v ON_ERROR_STOP=1 -f tools/schema_report.sql > schema.md
          else
            psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" \
              -v ON_ERROR_STOP=1 -f tools/schema_report.sql > schema.md
          fi
          echo "✅ schema.md generated"

      - name: Upload schema artifact
        uses: actions/upload-artifact@v4
        with:
          name: schema-report
          path: schema.md

      # --- Export CSV ---
      - name: Export public tables to CSV
        shell: bash
        env:
          PGPASSWORD: "${{ secrets.SUPABASE_DB_PASSWORD }}"
          PORT: "${{ steps.pick.outputs.PORT }}"
          USER: "${{ steps.pick.outputs.USER }}"
          PGOPT: "${{ steps.pick.outputs.PGOPT }}"
        run: |
          set -e
          rm -rf data_export data/csv
          mkdir -p data_export data/csv

          echo "# Data export summary" > data_summary.md
          echo "_Generated: $(date -u)_" >> data_summary.md
          echo >> data_summary.md

          if [ -n "$PGOPT" ]; then
            LIST=$(PGOPTIONS="$PGOPT" psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" -Atc \
              "select tablename from pg_tables where schemaname='public' order by tablename;")
            for T in $LIST; do
              echo "Export $T"
              PGOPTIONS="$PGOPT" psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" \
                -c "\copy public.\"$T\" to 'data_export/${T}.csv' csv header"
              CNT=$(PGOPTIONS="$PGOPT" psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" -Atc \
                "select count(*) from public.\"$T\";")
              echo "- **$T**: \`$CNT\` rows" >> data_summary.md
            done
          else
            LIST=$(psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" -Atc \
              "select tablename from pg_tables where schemaname='public' order by tablename;")
            for T in $LIST; do
              echo "Export $T"
              psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" \
                -c "\copy public.\"$T\" to 'data_export/${T}.csv' csv header"
              CNT=$(psql "host=$HOST_CLEAN port=$PORT dbname=$DB_NAME user=$USER sslmode=require" -Atc \
                "select count(*) from public.\"$T\";")
              echo "- **$T**: \`$CNT\` rows" >> data_summary.md
            done
          fi

          cp -f data_export/*.csv data/csv/ 2>/dev/null || true
          ( cd data_export && zip -9 -r ../data-csv.zip . )
          echo "✅ CSV ready"

      - name: Upload CSV zip
        uses: actions/upload-artifact@v4
        with:
          name: supabase-data-csv
          path: data-csv.zip

      # --- Commit + fetch/rebase + push ---
      - name: Commit to repo
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add schema.md data_summary.md data/csv/
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(export): update schema.md, data_summary.md and CSVs"
            git fetch origin main
            git rebase origin/main || git rebase --abort
            git push origin main
          fi
