#!/usr/bin/env python3
"""
Script pour enrichir intelligemment TOUTES les recettes une par une.
Utilise la connaissance culinaire pour compl√©ter chaque recette de mani√®re r√©aliste.
"""

import re
from typing import Dict, Optional, Tuple

class RecipeEnricher:
    """Enrichit les recettes avec des donn√©es r√©alistes bas√©es sur la connaissance culinaire"""
    
    def __init__(self):
        # Base de connaissance culinaire
        self.cooking_times = {
            # Viandes
            r'poulet r√¥ti': (15, 60, 'Cuisson au four'),
            r'poulet grill√©': (10, 20, 'Grillade'),
            r'steak|entrec√¥te|bavette': (5, 10, 'Po√™le'),
            r'r√¥ti de (b≈ìuf|veau|porc)': (20, 90, 'Cuisson au four'),
            
            # Poissons
            r'saumon (grill√©|po√™l√©)': (5, 15, 'Po√™le'),
            r'poisson au four': (10, 25, 'Cuisson au four'),
            
            # P√¢tes & Riz
            r'spaghetti|penne|p√¢tes': (5, 12, 'Cuisson √† l\'eau'),
            r'risotto': (10, 30, 'Mijotage'),
            r'riz': (5, 20, 'Cuisson √† l\'eau'),
            
            # Soupes
            r'soupe|velout√©': (15, 30, 'Mijotage'),
            
            # Desserts
            r'g√¢teau|cake': (15, 40, 'Cuisson au four'),
            r'tarte': (20, 35, 'Cuisson au four'),
            r'mousse|cr√®me': (20, 0, 'Sans cuisson'),
            
            # Sauces
            r'sauce|vinaigrette': (5, 10, 'Sans cuisson'),
            r'b√©chamel|hollandaise': (5, 10, 'Cuisson sur feu'),
        }
        
        # Tailles de portions par type
        self.default_servings = {
            'PLAT_PRINCIPAL': 4,
            'ENTREE': 4,
            'DESSERT': 6,
            'ACCOMPAGNEMENT': 4,
            'SAUCE': 4,
        }
        
    def analyze_recipe(self, recipe: Dict) -> Dict:
        """Analyse une recette et retourne les valeurs enrichies"""
        name = recipe['name'].lower()
        role = recipe['role']
        
        # D√©terminer les temps de cuisson
        prep_time, cook_time, cooking_method = self._determine_cooking_times(name, role)
        
        # D√©terminer les portions
        servings = self._determine_servings(name, role)
        
        # D√©terminer si c'est un plat complet
        is_complete_meal, needs_side_dish = self._determine_meal_completeness(name, role)
        
        return {
            'prep_time_minutes': prep_time,
            'cook_time_minutes': cook_time,
            'servings': servings,
            'cooking_method': cooking_method,
            'is_complete_meal': is_complete_meal,
            'needs_side_dish': needs_side_dish,
        }
    
    def _determine_cooking_times(self, name: str, role: str) -> Tuple[int, int, str]:
        """D√©termine les temps de pr√©paration, cuisson et m√©thode"""
        
        # Chercher dans la base de connaissance
        for pattern, (prep, cook, method) in self.cooking_times.items():
            if re.search(pattern, name, re.IGNORECASE):
                return prep, cook, method
        
        # Valeurs par d√©faut selon le r√¥le
        if role == 'SAUCE':
            return 5, 10, 'Cuisson sur feu'
        elif role == 'DESSERT':
            if 'glace' in name or 'sorbet' in name:
                return 15, 0, 'Sans cuisson'
            return 20, 35, 'Cuisson au four'
        elif role == 'ENTREE':
            if 'salade' in name:
                return 15, 0, 'Sans cuisson'
            return 10, 15, 'Cuisson simple'
        elif role == 'ACCOMPAGNEMENT':
            if 'vapeur' in name:
                return 10, 15, 'Cuisson vapeur'
            elif 'r√¥ti' in name or 'gratin√©' in name:
                return 10, 30, 'Cuisson au four'
            return 10, 20, 'Cuisson simple'
        else:  # PLAT_PRINCIPAL
            return 20, 30, 'Cuisson mixte'
    
    def _determine_servings(self, name: str, role: str) -> int:
        """D√©termine le nombre de portions"""
        
        # Sauces et accompagnements g√©n√©reux
        if role in ['SAUCE', 'ACCOMPAGNEMENT']:
            if 'bouillon' in name or 'fond' in name:
                return 8
            return 4
        
        # Desserts pour plus de monde
        if role == 'DESSERT':
            if 'g√¢teau' in name or 'tarte' in name:
                return 8
            return 6
        
        # Entr√©es et plats
        return self.default_servings.get(role, 4)
    
    def _determine_meal_completeness(self, name: str, role: str) -> Tuple[bool, Optional[bool]]:
        """D√©termine si c'est un plat complet et s'il n√©cessite un accompagnement"""
        
        if role != 'PLAT_PRINCIPAL':
            return False, None
        
        # Plats complets (ne n√©cessitent PAS d'accompagnement)
        complete_patterns = [
            r'paella|couscous|pot-au-feu|blanquette|cassoulet|choucroute',
            r'tajine|curry|risotto',
            r'pasta|spaghetti|penne|lasagne|p√¢tes',
            r'pizza|burger|sandwich|wrap',
            r'bowl|poke',
            r'salade (compos√©e|ni√ßoise|c√©sar)',
            r'quiche|tarte sal√©e',
            r'ramen|pho|soupe-repas',
        ]
        
        for pattern in complete_patterns:
            if re.search(pattern, name, re.IGNORECASE):
                return True, False
        
        # Plats n√©cessitant accompagnement
        needs_side_patterns = [
            r'^steak|^c√¥te|^entrec√¥te|^bavette|^onglet|^hampe',
            r'^poulet grill√©|^poulet r√¥ti(?! complet)',
            r'^poisson (grill√©|po√™l√©|au four)',
            r'^escalope|^filet de',
            r'^r√¥ti de',
        ]
        
        for pattern in needs_side_patterns:
            if re.search(pattern, name, re.IGNORECASE):
                return False, True
        
        # Par d√©faut: plat simple qui peut b√©n√©ficier d'un accompagnement
        return False, None
    
    def generate_update_sql(self, recipe_id: int, updates: Dict) -> str:
        """G√©n√®re le SQL UPDATE pour une recette"""
        
        set_clauses = []
        for column, value in updates.items():
            if value is None:
                set_clauses.append(f"{column} = NULL")
            elif isinstance(value, bool):
                set_clauses.append(f"{column} = {str(value).upper()}")
            elif isinstance(value, str):
                # √âchapper les apostrophes
                escaped_value = value.replace("'", "''")
                set_clauses.append(f"{column} = '{escaped_value}'")
            else:
                set_clauses.append(f"{column} = {value}")
        
        return f"UPDATE recipes SET {', '.join(set_clauses)} WHERE id = {recipe_id};"


def main():
    """Point d'entr√©e - g√©n√®re le SQL pour enrichir toutes les recettes"""
    
    print("=" * 80)
    print("ENRICHISSEMENT INTELLIGENT DE TOUTES LES RECETTES")
    print("=" * 80)
    print("\nCe script va g√©n√©rer le SQL pour enrichir chaque recette individuellement")
    print("avec des valeurs r√©alistes bas√©es sur la connaissance culinaire.\n")
    
    enricher = RecipeEnricher()
    
    # Exemple de recettes √† traiter
    example_recipes = [
        {'id': 2, 'name': 'Overnight porridge aux graines de chia et fruits rouges', 'role': 'ENTREE'},
        {'id': 3, 'name': 'Porridge sal√© aux √©pinards, feta et ≈ìuf mollet', 'role': 'PLAT_PRINCIPAL'},
        {'id': 11, 'name': 'Pancakes sal√©s au saumon fum√© et aneth', 'role': 'PLAT_PRINCIPAL'},
    ]
    
    print("EXEMPLES D'ENRICHISSEMENT:\n")
    for recipe in example_recipes:
        updates = enricher.analyze_recipe(recipe)
        print(f"üìù {recipe['name']}")
        print(f"   ‚Üí Pr√©paration: {updates['prep_time_minutes']} min")
        print(f"   ‚Üí Cuisson: {updates['cook_time_minutes']} min")
        print(f"   ‚Üí Portions: {updates['servings']}")
        print(f"   ‚Üí M√©thode: {updates['cooking_method']}")
        print(f"   ‚Üí Plat complet: {updates['is_complete_meal']}")
        print(f"   ‚Üí Besoin accompagnement: {updates['needs_side_dish']}")
        print()
    
    print("\n" + "=" * 80)
    print("‚úÖ Syst√®me pr√™t!")
    print("üí° Prochaine √©tape: R√©cup√©rer TOUTES les recettes de la DB et les enrichir")
    print("=" * 80)


if __name__ == "__main__":
    main()
