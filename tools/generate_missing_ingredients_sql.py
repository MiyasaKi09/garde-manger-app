#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Analyse tous les ingr√©dients des recettes et g√©n√®re le SQL
pour cr√©er les canonical_foods et archetypes manquants
"""

import csv
import re
from collections import defaultdict

def normalize_ingredient_name(name):
    """Normalise le nom d'un ingr√©dient"""
    name = name.lower().strip()
    # Retirer les adjectifs/√©tats courants mais garder l'info pour archetype
    name = re.sub(r'\s+', ' ', name).strip()
    return name

def extract_process_from_name(name):
    """
    Extrait le processus de transformation du nom de l'ingr√©dient
    Retourne (base_name, process, is_archetype)
    """
    name_lower = name.lower()
    
    # Patterns pour les arch√©types (transformations)
    archetype_patterns = {
        r'\bfrais\b': ('frais', False),  # Pas vraiment un processus
        r'\bfra√Æche?\b': ('frais', False),
        r'\bcuit\b': ('cuisson', True),
        r'\bcuite?\b': ('cuisson', True),
        r'\bmoulu\b': ('broyage', True),
        r'\bmoulue?\b': ('broyage', True),
        r'\br√¢p√©\b': ('r√¢page', True),
        r'\br√¢p√©e?\b': ('r√¢page', True),
        r'\bhach√©\b': ('hachage', True),
        r'\bhach√©e?\b': ('hachage', True),
        r'\bpel√©\b': ('√©pluchage', True),
        r'\bpel√©e?\b': ('√©pluchage', True),
        r'\bd√©noyaut√©\b': ('d√©noyautage', True),
        r'\bd√©noyaut√©e?\b': ('d√©noyautage', True),
        r'\bs√©ch√©\b': ('s√©chage', True),
        r'\bs√©ch√©e?\b': ('s√©chage', True),
        r'\bcongel√©\b': ('cong√©lation', True),
        r'\bcongel√©e?\b': ('cong√©lation', True),
        r'\bfum√©\b': ('fumage', True),
        r'\bfum√©e?\b': ('fumage', True),
        r'\bgrill√©\b': ('grillage', True),
        r'\bgrill√©e?\b': ('grillage', True),
        r'\bmarin√©\b': ('marinade', True),
        r'\bmarin√©e?\b': ('marinade', True),
        r'\bferment√©\b': ('fermentation', True),
        r'\bferment√©e?\b': ('fermentation', True),
        r'\ben poudre\b': ('s√©chage et broyage', True),
        r'\ben tranches?\b': ('tranchage', True),
        r'\ben d√©s\b': ('d√©coupe', True),
        r'\ben morceaux\b': ('d√©coupe', True),
        r'\bau sirop\b': ('mise en sirop', True),
        r'\bau naturel\b': ('nature', False),
        r'\bsous vide\b': ('mise sous vide', True),
        r'\ben bocal\b': ('mise en bocal', True),
        r'\ben conserve\b': ('mise en conserve', True),
        r'\ben bo√Æte\b': ('mise en conserve', True),
    }
    
    process_found = None
    is_archetype = False
    
    for pattern, (process, is_arch) in archetype_patterns.items():
        if re.search(pattern, name_lower):
            process_found = process
            is_archetype = is_arch
            break
    
    # Retirer les processus du nom de base
    base_name = name
    for pattern in archetype_patterns.keys():
        base_name = re.sub(pattern, '', base_name, flags=re.IGNORECASE)
    
    base_name = re.sub(r'\s+', ' ', base_name).strip()
    
    return (base_name, process_found, is_archetype)

def categorize_ingredient(ingredient_name):
    """
    Cat√©gorise un ingr√©dient et d√©termine s'il doit √™tre
    canonical_food ou archetype
    """
    name_lower = ingredient_name.lower()
    
    # Ingr√©dients compos√©s ou pr√©par√©s -> archetypes
    if any(word in name_lower for word in [
        'bouillon', 'fond', 'sauce', 'p√¢te', 'cr√®me', 'fromage',
        'huile de', "huile d'", 'vinaigre de', 'jus de',
        'sirop de', 'pur√©e de', 'coulis de', 'compote de',
        'confiture de', 'gel√©e de', 'conserve de'
    ]):
        return 'archetype'
    
    # D√©terminer par le processus
    base_name, process, is_archetype = extract_process_from_name(ingredient_name)
    
    if is_archetype:
        return 'archetype'
    
    return 'canonical_food'

def guess_category_id(ingredient_name):
    """Devine la cat√©gorie d'un ingr√©dient"""
    name_lower = ingredient_name.lower()
    
    # Fruits (category 1)
    if any(word in name_lower for word in [
        'pomme', 'poire', 'banane', 'fraise', 'framboise', 'myrtille',
        'citron', 'orange', 'mandarine', 'pamplemousse', 'fruit'
    ]):
        return 1
    
    # L√©gumes (category 2)
    if any(word in name_lower for word in [
        'carotte', 'tomate', 'oignon', 'ail', 'poivron', 'courgette',
        'aubergine', 'concombre', 'salade', '√©pinard', 'chou', 'l√©gume'
    ]):
        return 2
    
    # Viandes/Poissons (category 9)
    if any(word in name_lower for word in [
        'poulet', 'boeuf', 'porc', 'veau', 'agneau', 'viande',
        'saumon', 'thon', 'cabillaud', 'poisson', 'crevette', 'moule'
    ]):
        return 9
    
    # Produits laitiers (category 7)
    if any(word in name_lower for word in [
        'lait', 'yaourt', 'fromage', 'cr√®me', 'beurre', 'mozzarella'
    ]):
        return 7
    
    # C√©r√©ales/F√©culents (category 5)
    if any(word in name_lower for word in [
        'farine', 'pain', 'riz', 'p√¢tes', 'nouilles', 'avoine', 'bl√©'
    ]):
        return 5
    
    # Herbes/√âpices (category 10)
    if any(word in name_lower for word in [
        'basilic', 'persil', 'coriandre', 'thym', 'romarin', 'menthe',
        'poivre', 'sel', 'paprika', 'cumin', 'curry'
    ]):
        return 10
    
    # Par d√©faut: √Ä classer
    return 14  # category "Autres"

def main():
    print("üîç Chargement des donn√©es existantes...")
    
    # Charger canonical_foods existants
    existing_canonical = {}
    with open('../supabase/exports/latest/csv/canonical_foods.csv', 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            name = row['canonical_name'].lower().strip()
            existing_canonical[name] = row['id']
    
    print(f"‚úÖ {len(existing_canonical)} canonical_foods existants")
    
    # Charger archetypes existants
    existing_archetypes = {}
    with open('../supabase/exports/latest/csv/archetypes.csv', 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            name = row['name'].lower().strip()
            existing_archetypes[name] = row['id']
    
    print(f"‚úÖ {len(existing_archetypes)} archetypes existants")
    
    # Extraire tous les ingr√©dients uniques
    print("\nüîç Extraction des ingr√©dients des recettes...")
    
    all_ingredients = defaultdict(int)  # ingredient -> count
    
    with open('../LISTE_TOUTES_RECETTES COMPLETE.txt', 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        header = next(reader)
        
        for row in reader:
            if not row or len(row) < 4:
                continue
            
            # Parser les ingr√©dients (colonnes 3+)
            for i in range(3, len(row)):
                ingredient_raw = row[i].strip()
                if not ingredient_raw:
                    continue
                
                fields = ingredient_raw.split('|')
                if len(fields) >= 3:
                    ingredient_name = fields[2].strip()
                    all_ingredients[ingredient_name] += 1
    
    print(f"‚úÖ {len(all_ingredients)} ingr√©dients uniques trouv√©s")
    
    # Analyser les ingr√©dients manquants
    print("\nüìä Analyse des ingr√©dients manquants...")
    
    missing_canonical = {}
    missing_archetypes = {}
    
    for ingredient, count in all_ingredients.items():
        normalized = normalize_ingredient_name(ingredient)
        
        # V√©rifier si existe d√©j√†
        if normalized in existing_canonical or normalized in existing_archetypes:
            continue
        
        # D√©terminer le type
        ingredient_type = categorize_ingredient(ingredient)
        base_name, process, is_archetype = extract_process_from_name(ingredient)
        
        if ingredient_type == 'archetype' or is_archetype:
            missing_archetypes[ingredient] = {
                'base_name': base_name,
                'process': process,
                'count': count,
                'category_id': guess_category_id(base_name)
            }
        else:
            missing_canonical[ingredient] = {
                'count': count,
                'category_id': guess_category_id(ingredient)
            }
    
    print(f"‚ö†Ô∏è  {len(missing_canonical)} canonical_foods √† cr√©er")
    print(f"‚ö†Ô∏è  {len(missing_archetypes)} archetypes √† cr√©er")
    
    # G√©n√©rer le SQL
    print("\nüìù G√©n√©ration du SQL...")
    
    sql_file = 'insert_missing_ingredients.sql'
    report_file = 'missing_ingredients_report.txt'
    
    with open(sql_file, 'w', encoding='utf-8') as sql_f, \
         open(report_file, 'w', encoding='utf-8') as report_f:
        
        sql_f.write("-- Insertion des ingr√©dients manquants\n")
        sql_f.write("-- G√©n√©r√© automatiquement\n")
        sql_f.write("-- " + "=" * 70 + "\n\n")
        sql_f.write("BEGIN;\n\n")
        
        report_f.write("RAPPORT DES INGR√âDIENTS MANQUANTS\n")
        report_f.write("=" * 80 + "\n\n")
        
        # 1. Canonical foods
        if missing_canonical:
            sql_f.write("-- =====================================================\n")
            sql_f.write("-- CANONICAL FOODS\n")
            sql_f.write("-- =====================================================\n\n")
            
            report_f.write("CANONICAL FOODS √Ä CR√âER\n")
            report_f.write("-" * 80 + "\n\n")
            
            for ingredient in sorted(missing_canonical.keys(), key=lambda x: missing_canonical[x]['count'], reverse=True):
                info = missing_canonical[ingredient]
                
                report_f.write(f"‚Ä¢ {ingredient}\n")
                report_f.write(f"  Cat√©gorie estim√©e: {info['category_id']}\n")
                report_f.write(f"  Occurrences: {info['count']}\n\n")
                
                sql_f.write(f"-- {ingredient} (utilis√© {info['count']}x)\n")
                sql_f.write(f"INSERT INTO canonical_foods (canonical_name, category_id, created_at, updated_at)\n")
                sql_f.write(f"VALUES ('{ingredient.replace("'", "''")}', {info['category_id']}, NOW(), NOW())\n")
                sql_f.write(f"ON CONFLICT (canonical_name) DO NOTHING;\n\n")
        
        # 2. Archetypes
        if missing_archetypes:
            sql_f.write("\n-- =====================================================\n")
            sql_f.write("-- ARCHETYPES\n")
            sql_f.write("-- =====================================================\n\n")
            
            report_f.write("\n" + "=" * 80 + "\n")
            report_f.write("ARCHETYPES √Ä CR√âER\n")
            report_f.write("-" * 80 + "\n\n")
            
            for ingredient in sorted(missing_archetypes.keys(), key=lambda x: missing_archetypes[x]['count'], reverse=True):
                info = missing_archetypes[ingredient]
                
                report_f.write(f"‚Ä¢ {ingredient}\n")
                report_f.write(f"  Nom de base: {info['base_name']}\n")
                report_f.write(f"  Processus: {info['process'] or 'N/A'}\n")
                report_f.write(f"  Cat√©gorie estim√©e: {info['category_id']}\n")
                report_f.write(f"  Occurrences: {info['count']}\n\n")
                
                sql_f.write(f"-- {ingredient} (utilis√© {info['count']}x)\n")
                sql_f.write(f"-- TODO: V√©rifier canonical_food_id pour '{info['base_name']}'\n")
                sql_f.write(f"INSERT INTO archetypes (name, process, created_at, updated_at, notes)\n")
                
                process_value = f"'{info['process'].replace(chr(39), chr(39)*2)}'" if info['process'] else "NULL"
                ingredient_escaped = ingredient.replace("'", "''")
                base_name_escaped = info['base_name'].replace("'", "''")
                
                sql_f.write(f"VALUES (\n")
                sql_f.write(f"  '{ingredient_escaped}',\n")
                sql_f.write(f"  {process_value},\n")
                sql_f.write(f"  NOW(),\n")
                sql_f.write(f"  NOW(),\n")
                sql_f.write(f"  'Auto-g√©n√©r√© - base: {base_name_escaped}')\n")
                sql_f.write(f"ON CONFLICT DO NOTHING;\n\n")
        
        sql_f.write("\nCOMMIT;\n")
        sql_f.write(f"\n-- Total: {len(missing_canonical)} canonical_foods + {len(missing_archetypes)} archetypes\n")
        
        # Statistiques
        report_f.write("\n" + "=" * 80 + "\n")
        report_f.write("STATISTIQUES\n")
        report_f.write("=" * 80 + "\n\n")
        report_f.write(f"Total ingr√©dients uniques: {len(all_ingredients)}\n")
        report_f.write(f"D√©j√† existants: {len(all_ingredients) - len(missing_canonical) - len(missing_archetypes)}\n")
        report_f.write(f"√Ä cr√©er:\n")
        report_f.write(f"  - Canonical foods: {len(missing_canonical)}\n")
        report_f.write(f"  - Archetypes: {len(missing_archetypes)}\n")
    
    print(f"\n‚úÖ Fichiers g√©n√©r√©s:")
    print(f"   üìÑ {sql_file}")
    print(f"   üìÑ {report_file}")
    print(f"\nüìä R√©sum√©:")
    print(f"   Total ingr√©dients: {len(all_ingredients)}")
    print(f"   D√©j√† existants: {len(all_ingredients) - len(missing_canonical) - len(missing_archetypes)}")
    print(f"   üìù Canonical foods √† cr√©er: {len(missing_canonical)}")
    print(f"   üìù Archetypes √† cr√©er: {len(missing_archetypes)}")
    
    print(f"\n‚ö†Ô∏è  ATTENTION:")
    print(f"   Le SQL g√©n√©r√© contient des TODO pour les archetypes.")
    print(f"   Il faut v√©rifier les canonical_food_id manuellement.")
    
    print(f"\nüöÄ Pour ins√©rer les donn√©es:")
    print(f"   1. R√©viser le SQL et compl√©ter les canonical_food_id")
    print(f"   2. PGPASSWORD='...' psql \"$DATABASE_URL_TX\" -f {sql_file}")

if __name__ == '__main__':
    main()
