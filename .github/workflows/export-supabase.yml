name: Export Supabase (schema + CSV)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      DB_NAME: postgres
      DB_PORT: 6543
      DB_SSL: require
    steps:
      - uses: actions/checkout@v4

      - name: install psql and zip
        run: sudo apt-get update && sudo apt-get install -y postgresql-client zip

      - name: detect connection mode
        id: pick
        shell: bash
        env:
          PGPASSWORD: "${{ secrets.SUPABASE_DB_PASSWORD }}"
          HOST: "${{ secrets.SUPABASE_POOLER_HOST }}"
          REF: "${{ secrets.SUPABASE_PROJECT_REF }}"
        run: |
          set -e
          echo "try A: user=postgres.$REF"
          if psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres.$REF" -Atc "select 1;" >/dev/null 2>&1; then
            echo "MODE=A" >> "$GITHUB_OUTPUT"
            echo "ok=1"    >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "try B: user=postgres + PGOPTIONS=project=$REF"
          export PGOPTIONS="project=$REF"
          if psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres" -Atc "select 1;" >/dev/null 2>&1; then
            echo "MODE=B" >> "$GITHUB_OUTPUT"
            echo "ok=1"   >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "no working mode"
          exit 1

      - name: generate schema.md
        if: steps.pick.outputs.ok == '1'
        shell: bash
        env:
          PGPASSWORD: "${{ secrets.SUPABASE_DB_PASSWORD }}"
          HOST: "${{ secrets.SUPABASE_POOLER_HOST }}"
          REF: "${{ secrets.SUPABASE_PROJECT_REF }}"
          MODE: "${{ steps.pick.outputs.MODE }}"
        run: |
          set -e
          if [ "$MODE" = "MODE=A" ]; then
            psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres.$REF" \
              -v ON_ERROR_STOP=1 -f tools/schema_report.sql > schema.md
          else
            export PGOPTIONS="project=$REF"
            psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres" \
              -v ON_ERROR_STOP=1 -f tools/schema_report.sql > schema.md
          fi

      - name: upload schema artifact
        if: steps.pick.outputs.ok == '1'
        uses: actions/upload-artifact@v4
        with:
          name: schema-report
          path: schema.md

      - name: export tables to CSV
        if: steps.pick.outputs.ok == '1'
        shell: bash
        env:
          PGPASSWORD: "${{ secrets.SUPABASE_DB_PASSWORD }}"
          HOST: "${{ secrets.SUPABASE_POOLER_HOST }}"
          REF: "${{ secrets.SUPABASE_PROJECT_REF }}"
          MODE: "${{ steps.pick.outputs.MODE }}"
        run: |
          set -e
          rm -rf data_export data/csv
          mkdir -p data_export data/csv

          if [ "$MODE" = "MODE=A" ]; then
            LIST=$(psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres.$REF" -Atc "select tablename from pg_tables where schemaname='public' order by tablename;")
            for T in $LIST; do
              psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres.$REF" -c "\copy public.\"$T\" to 'data_export/${T}.csv' csv header"
            done
          else
            export PGOPTIONS="project=$REF"
            LIST=$(psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres" -Atc "select tablename from pg_tables where schemaname='public' order by tablename;")
            for T in $LIST; do
              psql -h "$HOST" -p "$DB_PORT" -d "$DB_NAME" -U "postgres" -c "\copy public.\"$T\" to 'data_export/${T}.csv' csv header"
            done
          fi

          cp -f data_export/*.csv data/csv/ 2>/dev/null || true
          ( cd data_export && zip -9 -r ../data-csv.zip . )

      - name: upload CSV zip
        if: steps.pick.outputs.ok == '1'
        uses: actions/upload-artifact@v4
        with:
          name: supabase-data-csv
          path: data-csv.zip

      - name: commit to repo
        if: steps.pick.outputs.ok == '1'
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add schema.md data/csv/
          if git diff --cached --quiet; then
            echo "no changes"
          else
            git commit -m "chore(export): update schema + csv"
            git push
          fi
